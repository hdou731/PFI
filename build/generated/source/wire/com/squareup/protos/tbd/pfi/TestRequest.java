// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.tbd.pfi.TestRequest in pfi.proto
package com.squareup.protos.tbd.pfi;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.ReverseProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class TestRequest extends Message<TestRequest, TestRequest.Builder> {
  public static final ProtoAdapter<TestRequest> ADAPTER = new ProtoAdapter_TestRequest();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_TEST = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String test;

  public TestRequest(String test) {
    this(test, ByteString.EMPTY);
  }

  public TestRequest(String test, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.test = test;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.test = test;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TestRequest)) return false;
    TestRequest o = (TestRequest) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(test, o.test);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (test != null ? test.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (test != null) builder.append(", test=").append(Internal.sanitize(test));
    return builder.replace(0, 2, "TestRequest{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<TestRequest, Builder> {
    public String test;

    public Builder() {
    }

    public Builder test(String test) {
      this.test = test;
      return this;
    }

    @Override
    public TestRequest build() {
      return new TestRequest(test, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_TestRequest extends ProtoAdapter<TestRequest> {
    public ProtoAdapter_TestRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, TestRequest.class, "type.googleapis.com/squareup.protos.tbd.pfi.TestRequest", Syntax.PROTO_2, null, "pfi.proto");
    }

    @Override
    public int encodedSize(TestRequest value) {
      int result = 0;
      result += ProtoAdapter.STRING.encodedSizeWithTag(1, value.test);
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, TestRequest value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.test);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public void encode(ReverseProtoWriter writer, TestRequest value) throws IOException {
      writer.writeBytes(value.unknownFields());
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.test);
    }

    @Override
    public TestRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.test(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public TestRequest redact(TestRequest value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
